/**
THIS FILE WAS GENERATED BY A BUILD AND SHOULD NOT BE EDITED DIRECTLY.
This file is the bundled integration code generated by running npm run build command in the command line.
To edit the integration code, please edit code in the src/ folder and run `npm run build` in the command line to regenerate this file.
**/

(function () {
  'use strict';

  function _regeneratorRuntime() {
    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

    _regeneratorRuntime = function () {
      return exports;
    };

    var exports = {},
        Op = Object.prototype,
        hasOwn = Op.hasOwnProperty,
        $Symbol = "function" == typeof Symbol ? Symbol : {},
        iteratorSymbol = $Symbol.iterator || "@@iterator",
        asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
        toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      return Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key];
    }

    try {
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
          generator = Object.create(protoGenerator.prototype),
          context = new Context(tryLocsList || []);
      return generator._invoke = function (innerFn, self, context) {
        var state = "suspendedStart";
        return function (method, arg) {
          if ("executing" === state) throw new Error("Generator is already running");

          if ("completed" === state) {
            if ("throw" === method) throw arg;
            return doneResult();
          }

          for (context.method = method, context.arg = arg;;) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
              if ("suspendedStart" === state) throw state = "completed", context.arg;
              context.dispatchException(context.arg);
            } else "return" === context.method && context.abrupt("return", context.arg);
            state = "executing";
            var record = tryCatch(innerFn, self, context);

            if ("normal" === record.type) {
              if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
              return {
                value: record.arg,
                done: context.done
              };
            }

            "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
          }
        };
      }(innerFn, self, context), generator;
    }

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    exports.wrap = wrap;
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf,
        NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if ("throw" !== record.type) {
          var result = record.arg,
              value = result.value;
          return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped, resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }

        reject(record.arg);
      }

      var previousPromise;

      this._invoke = function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (undefined === method) {
        if (context.delegate = null, "throw" === context.method) {
          if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
          context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

            return next.value = undefined, next.done = !0, next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    function doneResult() {
      return {
        value: undefined,
        done: !0
      };
    }

    return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (object) {
      var keys = [];

      for (var key in object) keys.push(key);

      return keys.reverse(), function next() {
        for (; keys.length;) {
          var key = keys.pop();
          if (key in object) return next.value = key, next.done = !1, next;
        }

        return next.done = !0, next;
      };
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      },
      stop: function () {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) throw exception;
        var context = this;

        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
              record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"),
                hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function (record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      catch: function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
      }
    }, exports;
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  var lastEvents = [];
  var eventThreshold = 100;
  /* istanbul ignore next */

  var logEvent = function logEvent(event, details) {
    var eventLog = document.querySelector('#event-log');
    lastEvents.push(event);

    if (lastEvents.length > eventThreshold) {
      lastEvents.shift();
      eventLog.querySelector('p.event:last-of-type').remove();
    }

    var evt = document.createElement('p');
    evt.classList.add('event');
    var evtName = document.createElement('strong');
    evtName.textContent = "".concat(event, " ");
    evtName.title = "".concat(event, ": ").concat(details);
    var evtDetails = document.createTextNode(details ? JSON.stringify(details) : '');
    evt.appendChild(evtName);
    evt.appendChild(evtDetails);
    eventLog.prepend(evt);
  };
  /* istanbul ignore next */

  var logLink = function logLink(event, text, href) {
    var eventLog = document.querySelector('#event-log');
    lastEvents.push(event);

    if (lastEvents.length > eventThreshold) {
      lastEvents.shift();
      eventLog.querySelector('p.event:last-of-type').remove();
    }

    var evt = document.createElement('p');
    evt.classList.add('event');
    var evtName = document.createElement('strong');
    evtName.textContent = "".concat(event, " ");
    var aLink = document.createElement('a');
    aLink.href = href;
    aLink.target = '_blank';
    aLink.textContent = text;
    evt.appendChild(evtName);
    evt.appendChild(aLink);
    eventLog.prepend(evt);
  };

  var waitForViewer = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(viewerAuthority) {
      var viewerModule;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.prev = 0;
              _context.next = 3;
              return import("".concat(viewerAuthority, "/viewer/api/v1/viewers/iv-view-1.x/static/js/iv-view.js"));

            case 3:
              viewerModule = _context.sent;
              window.ViewerFactory = viewerModule["default"];
              return _context.abrupt("return", window.ViewerFactory);

            case 8:
              _context.prev = 8;
              _context.t0 = _context["catch"](0);
              console.error('Error during import viewer module:', _context.t0);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[0, 8]]);
    }));

    return function waitForViewer(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var downloadExportedFile = function downloadExportedFile(e) {
    var loadSourcesProp = Object.keys(e.detail._embedded['otc:get_configs_id'].features).filter(function (property) {
      return property.startsWith('opentext.publishing.sources@LoadSources@');
    });
    var loadSources = Object.values(e.detail._embedded['otc:get_configs_id'].features[loadSourcesProp].documents);
    var sourceDocName = loadSources[0].filenameHint;

    var artifact = e.detail._embedded['pa:get_publication_artifacts'].find(function (e) {
      return e._embedded['ac:get_artifact_content'].urlTemplate;
    })._embedded['ac:get_artifact_content'];

    var exportType = artifact.acceptHint ? artifact.acceptHint === 'application/pdf' ? 'pdf' : 'tiff' : '';
    var urlTemplate = artifact.urlTemplate;
    var content = artifact.contentLinks[0];
    var placeholders = Array.from(urlTemplate.matchAll(/(\{\w+\})/gi)).map(function (p) {
      return p[0];
    });
    var url = placeholders.reduce(function (acc, p) {
      return acc.replace(p, content[p.slice(1, p.length - 1)]);
    }, urlTemplate);
    return fetch(url, {
      method: 'GET',
      responseType: 'arraybuffer',
      headers: {
        authorization: window.accessToken
      }
    }).then(function (response) {
      return response.arrayBuffer();
    }).then(function (buffer) {
      var file = new Blob([buffer], {
        type: 'application/octet-stream'
      });
      var fileURL = window.URL.createObjectURL(file);
      var link = window.document.createElement('a');
      link.href = fileURL;
      link.download = content.file ? content.file : sourceDocName + '.' + exportType;
      link.click();
      window.URL.revokeObjectURL(fileURL);
    });
  };
  /* istanbul ignore next */

  var setupEventListeners = function setupEventListeners(viewerKey) {
    //#region Viewer Events
    window.addEventListener(viewerKey + '-close', function (e) {
      return logEvent('Close request received', e.detail);
    });
    window.addEventListener(viewerKey + '-exportButtonClick', function (e) {
      return logEvent('Export button clicked', e.detail);
    });
    window.addEventListener(viewerKey + '-compareLayoutUpdated', function (e) {
      return logEvent('Compare layout updated', e.detail);
    });
    window.addEventListener(viewerKey + '-publicationIssues', function (e) {
      return logEvent('Publication issues occurred', e.detail);
    });
    window.addEventListener(viewerKey + '-modalOpened', function (e) {
      return logEvent('Modal opened', e.detail);
    });
    window.addEventListener(viewerKey + '-modalClosed', function (e) {
      return logEvent('Modal opened', e.detail);
    });
    window.addEventListener(viewerKey + '-searchResults', function (e) {
      return logEvent('Search results', e.detail);
    });
    /* Add custom Button / Dropdown / Pane Events per custom element */
    //#endregion
    //#region Annotation Events

    window.addEventListener(viewerKey + '-markupAdded', function (e) {
      return logEvent('New annotation added:', e.detail);
    });
    window.addEventListener(viewerKey + '-browseImages', function (e) {
      logEvent('Integration Controlled Browse for Images now!'); // window.viewerApi.removeRaster(
      //   'https://contentservice-cvt.ci.bp-paas.otxlab.net/v2/content/cj1lYWY2MzRhZS1hMzM3LTQzMTgtOTZiMi02NWFmNjMwMjg0YTgmaT1jN2QyZThiZi1lZTQyLTQzM2MtODdjMC0xNTkwZTg2ZDdjZDk=/download'
      // )
      // window.viewerApi.removeAllRasters()
      // window.viewerApi.addRasters(window.rastersFromBrowse)
    });
    window.addEventListener(viewerKey + '-markupFeaturesAvailable', function (e) {
      logEvent('Annotation features available:', e.detail);
      window.viewerApi.enableMarkupEvents(true);
      window.viewerApi.includeMarkupsInSearch(true);
      window.viewerApi.setRedactionReasonList([{
        code: '(b)',
        description: 'Written Consent',
        color: '#fcba03'
      }, {
        code: '(d)(5)',
        description: 'Civil Action'
      }, {
        code: '(j)(1)',
        description: 'Intelligence'
      }, {
        code: '(j)(2)',
        description: 'Investigative Efforts'
      }, {
        code: '(k)(1)',
        description: 'National Defense or Foreign Policy'
      }, {
        code: '(k)(3)',
        description: 'Protective Services'
      }, {
        code: '(k)(4)',
        description: 'Statistical'
      }, {
        code: '(k)(5)',
        description: 'Investigatory Material'
      }, {
        code: '(k)(6)',
        description: 'Testing or Examination Material'
      }, {
        code: '(k)(7)',
        description: 'Potential for Promotion'
      }, {
        code: 'multi-select',
        description: 'multiple reasons color',
        color: '#880000'
      }]);
      window.viewerApi.setDefaultRedactionTextLocation('leader-right');
    });
    window.addEventListener(viewerKey + '-markupEvent', function (e) {
      logEvent('markupEvent!', e.detail);
    });
    window.addEventListener(viewerKey + '-markupStoreComplete', function (e) {
      return logEvent('Annotation store complete:', e.detail);
    });
    window.addEventListener(viewerKey + '-markupsLoaded', function (e) {
      return logEvent('Annotations loaded:', e.detail);
    });
    window.addEventListener(viewerKey + '-markupsDirty', function (e) {
      return logEvent('Annotations dirty:', e.detail);
    });
    window.addEventListener(viewerKey + '-redactionReasonSet', function (e) {
      return logEvent('Redaction reason set:', e.detail);
    });
    window.addEventListener(viewerKey + '-requestRedactionReasons', function (e) {
      return logEvent('Redaction reasons request:', e.detail);
    });
    window.addEventListener(viewerKey + '-setSelection', function (e) {
      return logEvent('Annotation selection changed:', e.detail);
    });
    window.addEventListener(viewerKey + '-stampsLoaded', function (e) {
      return logEvent('Stamps loaded:', e.detail);
    }); //#endregion
    //#region Export Events

    window.addEventListener(viewerKey + '-exportFailure', function (e) {
      return logEvent('Export failed:', e.detail);
    });
    window.addEventListener(viewerKey + '-exportSuccess-download', function (e) {
      logEvent('Export download success:', e.detail);
      downloadExportedFile(e);
    });
    window.addEventListener(viewerKey + '-exportSuccess-print', function (e) {
      logEvent('Export print success:', e.detail);
    });
    window.addEventListener(viewerKey + '-bookmarksLoaded', function (e) {
      logEvent('Bookmarks loaded:', e.detail);

      if (window.viewerLink && viewerLink.type && viewerLink.type === 'bookmark') {
        window.viewerApi.setCurrentLocation(window.viewerLink);
      }
    });
    window.addEventListener(viewerKey + '-bookmarkLink', function (e) {
      var viewAsBinderInput = document.querySelector('#view-binder-toggle');
      var link = "".concat(window.location.protocol, "//").concat(window.location.host, "?layout=Full&binderView=").concat(viewAsBinderInput.checked, "&type=bookmark&name=").concat(encodeURIComponent(e.detail.name));
      logLink('Bookmark Link', "Click to open bookmark: ".concat(e.detail.name), link);
    });
    window.addEventListener(viewerKey + '-pageLink', function (e) {
      console.log('Page link event!', e.detail);
      var viewAsBinderInput = document.querySelector('#view-binder-toggle');
      var linkQuery = "?type=page&pid=".concat(e.detail.pid, "&pageNumber=").concat(e.detail.pageNumber, "&binderView=").concat(viewAsBinderInput.checked);
      var link = "".concat(window.location.protocol, "//").concat(window.location.host).concat(linkQuery);
      logLink('Page Link', "Click to open publication page number: ".concat(e.detail.pid, "/").concat(e.detail.pageNumber), link);
    });
    window.addEventListener(viewerKey + '-pageRender', function (e) {
      logEvent('Page rendered successfully:', e.detail);

      if (e.detail.index === 0 && window.viewerLink && (window.viewerLink.type === 'rectangle' || window.viewerLink.type === 'page')) {
        window.viewerApi.setCurrentLocation(window.viewerLink);
      }
    });
    window.addEventListener(viewerKey + '-locationChangeComplete', function (e) {
      logEvent('Location change complete:', e.detail);

      if (window.viewerLink) {
        delete window.viewerLink;
      }
    }); //#endregion
    //#region Error Events

    window.addEventListener(viewerKey + '-failureNotification', function (_ref2) {
      var detail = _ref2.detail;
      var eventTitle = 'Unknown failure';

      switch (detail.type) {
        case 'bookmarksLoadFailure':
          eventTitle = 'Bookmarks load failure:';
          break;

        case 'markupStoreFailure':
          eventTitle = 'Annotation store failure:';
          break;

        case 'rasterLoadFailure':
          eventTitle = 'Raster load failure:';
          break;

        case 'svgPageLoadFailure':
          eventTitle = 'Page load failure:';
          break;

        case 'thumbnailLoadFailure':
          eventTitle = 'Thumbnail load failure:';
          break;

        case 'translationFailed':
          eventTitle = 'Translation failure:';
          break;

        case 'loadImageFailure':
          eventTitle = 'Image load failure:';
          break;

        case 'loadRasterFailure':
          eventTitle = 'Raster load failure:';
          break;

        case 'markupLoadFailure':
          eventTitle = 'Annotation load failure:';
          break;

        case 'updatePublicationFailure':
          eventTitle = 'Update publication failure:';
          break;

        case 'searchFailure':
          eventTitle = 'Search failure:';
          break;

        case 'licenseFailure':
          eventTitle = 'License failure:';
          break;

        case 'searchPageTextFailure':
          eventTitle = 'Search page text failure:';
          break;

        case 'viewBinderFailure':
          eventTitle = 'View binder failure:';
          break;

        case 'getUserLicenseFailure':
          eventTitle = 'Get user license failure:';
          break;

        case 'findBookmarkFailure':
          if (window.viewerLink) {
            eventTitle = "Unable to find the linked bookmark, deleting link: ".concat(window.viewerLink);
            delete window.viewerLink;
          }

          break;
      }

      logEvent(eventTitle, detail);
    }); //#endregion
  };

  var compareMode = false;
  var setInitialPublications = function setInitialPublications() {
    var publications = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var viewer = arguments.length > 1 ? arguments[1] : undefined;

    if (publications.length >= 1) {
      publications.map(function (m) {
        return viewer.addPublication({
          publication: m
        });
      });

      if (publications.length > 1) {
        generatePublicationOptions(publications, viewer);
        enablePublicationSelector();
      }
    }

    viewer.render();
  };
  var setInitialSourceFile = function setInitialSourceFile() {
    var sourceFile = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;
    var publications = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var viewer = arguments.length > 2 ? arguments[2] : undefined;

    if (sourceFile) {
      generateQuickViewOptions(sourceFile, publications, viewer);
      enableQuickViewSelector(sourceFile);
    }
  };

  var addPublicationOptionsForElement = function addPublicationOptionsForElement(namedPublications, select) {
    namedPublications.forEach(function (publication) {
      var opt = document.createElement('option');
      opt.value = publication.publication.id;
      opt.textContent = publication.name;
      select.appendChild(opt);
    });
  };

  var addQuickViewOptionsForElement = function addQuickViewOptionsForElement(namedPublications, select) {
    namedPublications.forEach(function (publication) {
      var opt = document.createElement('option');
      opt.value = JSON.stringify(publication.publication);
      opt.textContent = publication.name;
      select.appendChild(opt);
    });
  };

  var generatePublicationOptions = function generatePublicationOptions(publications, viewer) {
    var namedPublications = publications.map(function (publication, i) {
      var _publication$featureS, _publication$featureS2, _publication$featureS3;

      var publicationHintValue = publication === null || publication === void 0 ? void 0 : (_publication$featureS = publication.featureSettings) === null || _publication$featureS === void 0 ? void 0 : (_publication$featureS2 = _publication$featureS.find(function (setting) {
        var _setting$feature;

        return (setting === null || setting === void 0 ? void 0 : (_setting$feature = setting.feature) === null || _setting$feature === void 0 ? void 0 : _setting$feature.name) === 'LoadSources';
      })) === null || _publication$featureS2 === void 0 ? void 0 : (_publication$featureS3 = _publication$featureS2.value) === null || _publication$featureS3 === void 0 ? void 0 : _publication$featureS3.find(function (obj) {
        return obj.hasOwnProperty('filenameHint');
      });
      return {
        name: publicationHintValue ? ''.concat(publicationHintValue.filenameHint, '.').concat(publicationHintValue.formatHint) : 'Unknown '.concat(i),
        publication: publication
      };
    });
    var primaryPublicationSelector = document.querySelector('#primary-publication-selector');
    var quickViewPublicationSelector = document.querySelector('#quickview-publication-selector');
    var comparePublicationSelector = document.querySelector('#compare-publication-selector');
    var viewAsBinderInput = document.querySelector('#view-binder-toggle');
    var primaryControl = document.querySelector('.primary-control');
    addPublicationOptionsForElement(namedPublications, primaryPublicationSelector);
    addPublicationOptionsForElement(namedPublications, quickViewPublicationSelector);
    addPublicationOptionsForElement(namedPublications, comparePublicationSelector);

    var setPrimaryPublication = function setPrimaryPublication(publicationId) {
      if (compareMode) {
        viewer.comparePublications(publicationId, comparePublicationSelector.value || publications[0].id);
      } else {
        viewer.viewPublication({
          pid: publicationId
        });
      }

      viewer.setViewerVisible({
        visible: true
      }); // viewer.setCurrentPage(0)
    };

    var setComparePublication = function setComparePublication(publicationId) {
      if (compareMode) {
        viewer.comparePublications(primaryPublicationSelector.value || publications[0].id, publicationId);
      }
    };

    var handlePublicationSelection = function handlePublicationSelection(_ref) {
      var _ref$target = _ref.target,
          elementId = _ref$target.id,
          publicationId = _ref$target.value;

      if (elementId === 'primary-publication-selector') {
        setPrimaryPublication(publicationId);
      } else {
        setComparePublication(publicationId);
      }
    };

    var handleBinderModeChange = function handleBinderModeChange(_ref2) {
      var viewAsBinder = _ref2.target.checked;

      if (viewAsBinder) {
        viewer.viewBinder(publications.map(function (p) {
          return p.id;
        }));
        primaryControl.classList.add('hidden');
      } else {
        viewer.viewPublication({
          pid: primaryPublicationSelector.value || publications[0].id
        });
        viewer.setViewerVisible({
          visible: true
        });
        primaryControl.classList.remove('hidden');
      }
    };

    primaryPublicationSelector.addEventListener('change', handlePublicationSelection);
    comparePublicationSelector.addEventListener('change', handlePublicationSelection);
    viewAsBinderInput.addEventListener('change', handleBinderModeChange);
  };
  var generateQuickViewOptions = function generateQuickViewOptions(sourceFile, publications, viewer) {
    var namedPublications = publications.map(function (publication, i) {
      var fileName = publication.fileName.indexOf('/') !== -1 ? publication.fileName.split('/').pop() : publication.fileName.indexOf('\\') !== -1 ? publication.fileName.split('\\').pop() : publication.fileName;
      return {
        name: fileName,
        publication: publication
      };
    });
    var quickViewPublicationSelector = document.querySelector('#quickview-publication-selector');
    addQuickViewOptionsForElement(namedPublications, quickViewPublicationSelector);

    var handleQuickViewSelection = function handleQuickViewSelection(_ref3) {
      var _ref3$target = _ref3.target,
          elementId = _ref3$target.id,
          publicationStr = _ref3$target.value;
      var sourceFileSelected = JSON.parse(publicationStr);

      if (elementId === 'quickview-publication-selector' && sourceFileSelected) {
        viewer.addCsrDocBySource({
          sourceFile: sourceFileSelected._links.download.href,
          formatHint: sourceFileSelected.mimeType,
          filenameHint: sourceFileSelected.fileName,
          view: true
        });
      }
    };

    quickViewPublicationSelector.addEventListener('change', handleQuickViewSelection);
  };
  var enablePublicationSelector = function enablePublicationSelector(viewer) {
    var publications = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var compare = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (publications.length > 1) {
      var binderControl = document.querySelector('.binder-control');
      var primaryControl = document.querySelector('.primary-control');
      var compareControl = document.querySelector('.compare-control');
      var quickviewControl = document.querySelector('.quickview-control');
      quickviewControl.classList.add('hidden');
      document.querySelector('.publication-controls').classList.remove('hidden');

      if (compare) {
        compareMode = true;
        binderControl.classList.add('hidden');
        primaryControl.classList.remove('hidden');
        compareControl.classList.remove('hidden');
      } else {
        compareMode = false;
        binderControl.classList.remove('hidden');

        if (document.querySelector('#view-binder-toggle').checked) {
          primaryControl.classList.add('hidden');
          viewer.viewBinder(publications.map(function (p) {
            return p.id;
          }));
        } else {
          primaryControl.classList.remove('hidden');
        }

        compareControl.classList.add('hidden');
      }
    }
  };
  var enableQuickViewSelector = function enableQuickViewSelector() {
    var sourceFile = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;

    if (sourceFile) {
      var primaryControl = document.querySelector('.primary-control');
      document.querySelector('.publication-controls').classList.remove('hidden');
      primaryControl.classList.add('hidden');
    }
  };

  var sampleLayout = {
    sideToolbar: 'defaultSideToolbar',
    defaultSideToolbar: [{
      component: 'SearchTabButton'
    }, {
      component: 'PagesTabButton'
    }, {
      component: 'LayersTabButton'
    }],
    topToolbar: 'defaultTopToolbar',
    defaultTopToolbar: {
      left: [{
        component: 'ClosePreviewButton'
      }, {
        component: 'DocumentTitle'
      }],
      center: [{
        component: 'ZoomControls'
      }, {
        component: 'PageSelector'
      }],
      right: [{
        component: 'Maximize'
      }, {
        component: 'MoreAction'
      }]
    }
  };
  var layouts = [{
    name: 'Default',
    layout: sampleLayout,
    title: 'View document with zoom in and zoom out features',
    onSelected: function onSelected(viewer) {
      clearViewer(viewer); // viewer.setUserName('Viewer JS Sample')

      if (window.sourceFile) {
        viewer.addCsrDocBySource({
          sourceFile: sourceFile._links.download.href,
          formatHint: sourceFile.mimeType,
          filenameHint: sourceFile.fileName,
          view: true
        });
      } else {
        enablePublicationSelector(viewer, window.publications, false);
        var primaryPublicationSelector = document.querySelector('#primary-publication-selector');

        if (window.viewerLink && (window.viewerLink.type === 'rectangle' || window.viewerLink.type === 'page' || window.viewerLink.type === 'bookmark')) {
          if (window.uiOptions && window.uiOptions.binderView && window.uiOptions.binderView === 'true') {
            var viewAsBinderInput = document.querySelector('#view-binder-toggle');
            viewAsBinderInput.checked = true;
            var evt = new Event('change');
            viewAsBinderInput.dispatchEvent(evt);
          } else {
            primaryPublicationSelector.value = window.viewerLink.pid || window.publications[0].id;
            viewer.viewPublication({
              pid: primaryPublicationSelector.value
            });
          }
        } else {
          viewer.viewPublication({
            pid: primaryPublicationSelector.value || window.publications[0].id
          });
        }

        viewer.setViewerVisible({
          visible: true
        });
      }
    }
  }
  /*{
    name: 'Accessibility',
    layout: accessibleLayout,
    title: 'Accessible content viewer for persons with disabilities',
    onSelected: (viewer) => {
      clearViewer(viewer)
      // viewer.setUserName('Viewer JS Sample')
      enablePublicationSelector(viewer, window.publications, false)
      const primaryPublicationSelector = document.querySelector('#primary-publication-selector')
      viewer.viewPublication({pid: primaryPublicationSelector.value || window.publications[0].id})
    }
  }*/
  ];
  var currentLayout = '';
  var enableLayoutSwitcher = function enableLayoutSwitcher(viewer) {
    var controlPanel = document.querySelector('.controls');
    controlPanel.classList.remove('hidden');
    controlPanel.addEventListener('click', function (e) {
      e.preventDefault();

      if (e.target.matches('button.layout')) {
        var layoutName = e.target.dataset.layout;
        setLayout(layoutName, viewer);
      }
    });
    layouts.forEach(function (layout) {
      var btn = document.createElement('button');
      btn.classList.add('layout');
      btn.dataset.layout = layout.name;
      btn.textContent = layout.name;
      btn.title = layout.title;
      controlPanel.appendChild(btn);
    });
  };
  var clearViewer = function clearViewer(viewer) {
    viewer.clearViewer();
  };
  var setLayout = function setLayout(layoutName, viewer) {
    if (currentLayout !== layoutName) {
      var selectedLayout = layouts.find(function (l) {
        return l.name === layoutName;
      }); // viewer.setLayout(selectedLayout.layout)

      selectedLayout.onSelected && selectedLayout.onSelected(viewer);
      document.querySelectorAll('button.layout').forEach(function (el) {
        return el.classList.remove('current');
      });
      document.querySelector("button.layout[data-layout=\"".concat(layoutName, "\"]")).classList.add('current');
      currentLayout = layoutName;
    }

    viewer.setViewerVisible({
      visible: true
    });
  };

  var linkTypes = ['bookmark', 'rectangle', 'page'];
  var linkProperties = ['type', 'pid', 'pageNumber', 'name', 'id', 'left', 'top', 'right', 'bottom'];
  var uiProperties = ['binderView', 'layout'];

  var searchStringToObject = function searchStringToObject(searchStr, properties) {
    var pairs = searchStr.substring(1).split("&");

    if (pairs.length !== 0) {
      var obj = {};
      var pair;
      var i;

      for (i in pairs) {
        if (pairs[i] === "") continue;
        pair = pairs[i].split("=");
        var propName = decodeURIComponent(pair[0]);

        if (properties.includes(propName)) {
          obj[propName] = decodeURIComponent(pair[1]);
        }
      }

      return obj;
    }

    return undefined;
  };

  var viewerLinkFromSearchString = function viewerLinkFromSearchString(searchStr) {
    var searchObj = searchStringToObject(searchStr, linkProperties);

    if (searchObj && searchObj.type && linkTypes.includes(searchObj.type)) {
      return searchObj;
    }

    return undefined;
  };
  var uiOptionsFromSearchString = function uiOptionsFromSearchString(searchStr) {
    return searchStringToObject(searchStr, uiProperties);
  };

  var shouldRefresh = function shouldRefresh() {
    if (!window.accessTokenRefreshedAt) {
      return true;
    } // use half of the token life as window.


    var refreshedAt = new Date(window.accessTokenRefreshedAt);
    var EXPIRATION_WINDOW_IN_SECONDS = window.accessTokenExpires ? window.accessTokenExpires / 2 : 300;
    var expirationWindowStart = refreshedAt.setSeconds(refreshedAt.getSeconds() + EXPIRATION_WINDOW_IN_SECONDS) / 1000;
    var now = new Date();
    var nowInSeconds = now.getTime() / 1000;
    return nowInSeconds >= expirationWindowStart;
  };

  var refreshToken = function refreshToken() {
    return new Promise(function (resolve) {
      if (shouldRefresh()) {
        fetch('/ivsa/api/v1/refreshToken', {
          headers: {
            authorization: window.accessToken
          }
        }).then(function (res) {
          if (res.ok) {
            return res.json().then(function (body) {
              window.accessTokenRefreshedAt = new Date().getTime();
              window.accessToken = body.access_token;
              window.accessTokenExpires = body.expires;

              if (window.viewerApi) {
                window.viewerApi.setViewerOptions({
                  options: {
                    httpHeaders: {
                      Authorization: window.accessToken
                    }
                  }
                });
              }
            });
          } else {
            return res.json().then(function (body) {
              window.alert("Unable to refresh authorization token\n\n".concat(body.message));
            });
          }
        });
      }

      if (!window.accessTokenRefreshInterval) {
        window.accessTokenRefreshInterval = setInterval(function () {
          refreshToken();
        }, 60000 * 1);
      }

      return resolve();
    });
  };

  var startup = function startup() {
    refreshToken();
  };

  waitForViewer(window.viewerAuthority).then(function (ViewerFactory) {
    window.viewerApi = ViewerFactory.createViewer();
    logEvent('Viewer loaded:', window.viewerApi.id);
    setupEventListeners(window.viewerApi.id);
    enableLayoutSwitcher(window.viewerApi);
    window.viewerApi.setViewerOptions({
      options: {
        viewerHost: window.viewerAuthority,
        searchHost: window.highlightAuthority,
        httpHeaders: {
          Authorization: window.accessToken
        }
      }
    }); // window.viewerApi.setUserName('Viewer JS Sample')

    if (window.sourceFile) {
      setInitialSourceFile(window.sourceFile, window.publications, window.viewerApi);
    } else {
      setInitialPublications(window.publications, window.viewerApi);
    }

    setLayout(window.uiOptions.layout || 'Default', window.viewerApi);
  });
  window.uiOptions = uiOptionsFromSearchString(window.location.search);
  window.uiOptions && console.log("UI Options ".concat(JSON.stringify(window.uiOptions)));
  window.viewerLink = viewerLinkFromSearchString(window.location.search);
  window.viewerLink && console.log("Viewer link ".concat(JSON.stringify(window.viewerLink)));
  startup();

})();
